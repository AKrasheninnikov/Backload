Backload extensions folder. You may add, delete and rename extensions while the applicaiton is running.
(This file exists, so the installer will automatically create the Extentsions folder)

Instructions:
Extensions must follow a naming schema to distinguish them from arbitrary libraries and prevent naming conflicts: 
Backload.Extension.(CompanyName).[Opional] (e.g. Backload.Extension.Contoso, Backload.Extension.Contoso.BusinessLogic.v2, etc.).
The Extension-Manager looks for assemblies with the name format Backload.Extension.*.dll.
You can use a subfolder within the Extensions folder: e.g. (WebApp)/bin/Extensions/[optional subfolder].

The extensions make use of the .NET MEF (Managed Extensibility Framework). Exported classes must be marked with the 
System.ComponentModel.ExportAttribute and derieved from an approriate interface from Backload.Contracts.


Example:

using System.ComponentModel.Composition;
namespace Backload.Extension.Contoso
{
    [Export(typeof(IIncomingRequest))]
    public class IncomingRequest : IIncomingRequest
    {
        public string ObjectContext { get; set; }
        public string UploadContext  { get; set; }
        public string QueryFileName { get; set; }
        public string QueryExtraFolder { get; set; }
        public StopProcessingType StopProcessing { get; set; }
        public string ProcessingMessage { get; set; }
        public List<ExtensionLogger> Logger { get; set; }

        public bool ProcessStep(System.Web.HttpRequestBase request, string httpMethod)
        {
            if (httpMethod == "POST")
            {
                this.ObjectContext = "michael_jackson";
                // With UploadContext you can set a chain of subfolders by separating the subfolder names with a semicolon
                // We also use the ExtensionLogger to retrieve a list of extensions called so far.
                if (!string.IsNullOrEmpty(this.UploadContext)) this.UploadContext += ";";
                this.UploadContext += "PluginNo_" + Logger.Count.ToString();
                return true;
            }
            return false;
        }
    }
}